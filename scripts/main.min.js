"use strict";window.addEventListener("load",function(){window.app.modules.main.init(),objectFitImages()}),function(){if(window.app||(window.app={}),"modules"in window.app||(window.app.modules={}),!("gallery"in app.modules)){var e=function(){var e=this;e.getOptions=function(){e.container=document.querySelector(".gallery"),e.modalOpen=app.modules.modal.open},e.setupListener=function(){e.container.addEventListener("click",e.handleClick)},e.handleClick=function(n){var t=n.target,o=t.closest(".gallery__link");if(n.preventDefault(),o){var i=JSON.parse(o.getAttribute("data-info"));e.modalOpen(i)}},e.init=function(){e.getOptions(),e.setupListener()}};window.app.modules.gallery=new e}}(),function(){if(window.app||(window.app={}),"modules"in window.app||(window.app.modules={}),!("modal"in app.modules)){var e=function(){var e=this;e.getOptions=function(){e.container=document.querySelector(".modal"),e.title=document.querySelector(".modal__title"),e.description=document.querySelector(".modal__description p"),e.img=document.querySelector(".modal__preview img"),e.closeBtn=document.querySelector(".modal__close")},e.setupListener=function(){e.closeBtn.addEventListener("click",e.close)},e.open=function(n){var t=n||{};t.title=t.title?t.title:"Заголовок изображения не найден",t.description=t.description?t.description:"Описание изображения не найдено.",t.source=t.source?t.source:"images/vis-error.jpg",e.title.textContent=t.title,e.description.textContent=t.description,e.img.src=t.source,e.container.classList.add("modal_state_open")},e.close=function(){e.container.classList.remove("modal_state_open"),e.container.classList.remove("modal_state_loading")},e.init=function(){e.getOptions(),e.setupListener()}};window.app.modules.modal=new e}}(),function(){if(window.app||(window.app={}),"modules"in window.app||(window.app.modules={}),!("main"in app.modules)){var e=function(){var e=this;e.getOptions=function(){e.html=document.querySelector("html"),e.body=document.querySelector("body"),e.modules=app.modules},e.initModules=function(){for(var n in e.modules)e.modules.hasOwnProperty(n)&&"undefined"!=typeof e.modules[n].init&&"main"!==n&&e.modules[n].init()},e.init=function(){e.getOptions(),e.initModules()}};window.app.modules.main=new e}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
