"use strict";window.addEventListener("load",function(){window.app.modules.main.init(),objectFitImages()}),function(){if(window.app||(window.app={}),"modules"in window.app||(window.app.modules={}),!("gallery"in app.modules)){var e=function(){var e=this;e.getOptions=function(){e.container=document.querySelector(".gallery"),e.modalOpen=app.modules.modal.route},e.setupListener=function(){e.container.addEventListener("click",e.handleClick)},e.handleClick=function(t){var n=t.target,o=n.closest(".gallery__link");if(t.preventDefault(),o){var i=JSON.parse(o.getAttribute("data-info"));e.modalOpen(i)}},e.init=function(){e.getOptions(),e.setupListener()}};window.app.modules.gallery=new e}}(),function(){if(window.app||(window.app={}),"modules"in window.app||(window.app.modules={}),!("main"in app.modules)){var e=function(){var e=this;e.getOptions=function(){e.html=document.querySelector("html"),e.body=document.querySelector("body"),e.modules=app.modules},e.initModules=function(){for(var t in e.modules)e.modules.hasOwnProperty(t)&&"undefined"!=typeof e.modules[t].init&&"main"!==t&&e.modules[t].init()},e.init=function(){e.getOptions(),e.initModules()}};window.app.modules.main=new e}}(),function(){if(window.app||(window.app={}),"modules"in window.app||(window.app.modules={}),!("modal"in app.modules)){var e=function(){var e=this;e.getOptions=function(){e.container=document.querySelector(".modal"),e.title=document.querySelector(".modal__title"),e.description=document.querySelector(".modal__description p"),e.img=document.querySelector(".modal__preview img"),e.closeBtn=document.querySelector(".modal__close"),e.delay={open:150,close:200}},e.setupListener=function(){e.closeBtn.addEventListener("click",e.close)},e.route=function(t){e.setup(t),e.open()},e.open=function(){e.container.classList.add("modal_state_open"),setTimeout(function(){return e.container.classList.add("modal_state_visible")},e.delay.open)},e.close=function(){e.container.classList.remove("modal_state_visible"),setTimeout(function(){e.container.classList.remove("modal_state_open"),e.reset()},e.delay.close)},e.setup=function(t){var n=t||{};n.title=n.title?n.title:"Заголовок изображения не найден",n.description=n.description?n.description:"Описание изображения не найдено.",n.source=n.source?n.source:"images/vis-error.jpg",e.title.textContent=n.title,e.description.textContent=n.description,e.img.src=n.source},e.reset=function(){e.title.textContent="",e.description.textContent="",e.img.src=""},e.init=function(){e.getOptions(),e.setupListener()}};window.app.modules.modal=new e}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
